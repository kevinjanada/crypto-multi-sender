[{"/Users/kevin/playground/batch-sender-app/packages/app/pages/_app.tsx":"1","/Users/kevin/playground/batch-sender-app/packages/app/pages/api/hello.ts":"2","/Users/kevin/playground/batch-sender-app/packages/app/pages/index.tsx":"3","/Users/kevin/playground/batch-sender-app/packages/app/components/Footer.tsx":"4","/Users/kevin/playground/batch-sender-app/packages/app/components/Navbar.tsx":"5"},{"size":2325,"mtime":1660469690437,"results":"6","hashOfConfig":"7"},{"size":307,"mtime":1658809669380,"results":"8","hashOfConfig":"7"},{"size":8250,"mtime":1660479217708,"results":"9","hashOfConfig":"7"},{"size":619,"mtime":1658969038699,"results":"10","hashOfConfig":"7"},{"size":2075,"mtime":1660467983737,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"v59tls",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kevin/playground/batch-sender-app/packages/app/pages/_app.tsx",["29"],[],"import type { AppProps } from 'next/app'\nimport { ChakraProvider, extendTheme } from '@chakra-ui/react'\nimport { useHydrateAtoms } from \"jotai/utils\";\nimport { walletAtom, web3ProviderAtom } from \"../store\";\nimport { useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { useAtom } from \"jotai\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { getSupportedChainIds } from '../utils';\n\nconst theme = extendTheme({ \n  colors: {\n    brand: {\n      blue: '#1D3D72',\n      lightBlue: '#D6DCFB'\n    }\n  },\n})\n\n\nfunction MyApp({ Component, pageProps }: AppProps) {\n  const { initialState } = pageProps;\n  useHydrateAtoms(initialState ? [walletAtom, initialState] : [])\n\n  const supportedChainIds = getSupportedChainIds();\n\n  const [, setWallet] = useAtom(walletAtom);\n  const [, setWeb3Provider] = useAtom(web3ProviderAtom)\n\n  useEffect(() => {\n    const checkWeb3Provider = async () => {\n      const provider: ethers.providers.Web3Provider = new ethers.providers.Web3Provider((window as any).ethereum, \"any\");\n      // Prompt user for account connections\n      await provider.send(\"eth_requestAccounts\", []);\n      const signer = provider.getSigner();\n      const address = await signer.getAddress();\n      const { chainId } = await provider.getNetwork();\n      setWallet({ address, chainId });\n\n      if (!supportedChainIds.includes(Number(chainId))) {\n        toast(\"Unsupported Network\");\n      }\n\n      (provider.provider as any).on(\"chainChanged\", async function(chain: string) {\n        if (!supportedChainIds.includes(Number(chain))) {\n          toast(\"Unsupported Network\");\n        }\n        const signer = provider.getSigner();\n        const address = await signer.getAddress();\n        setWallet({\n          address,\n          chainId: Number(chain),\n        })\n      });\n\n      (provider.provider as any).on(\"accountsChanged\", async function(accounts: any) {\n        const { chainId } = await provider.getNetwork();\n        setWallet({\n          chainId,\n          address: accounts[0],\n        })\n      });\n\n      setWeb3Provider(provider);\n    }\n\n    checkWeb3Provider();\n  }, []);\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Component {...pageProps} />\n      <ToastContainer />\n    </ChakraProvider>\n  )\n}\n\nexport default MyApp\n","/Users/kevin/playground/batch-sender-app/packages/app/pages/api/hello.ts",[],[],"/Users/kevin/playground/batch-sender-app/packages/app/pages/index.tsx",["30"],[],"import type { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport Navbar from \"../components/Navbar\";\nimport Footer from \"../components/Footer\";\nimport {\n  Container,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Select,\n  Box,\n  Flex,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  NumberIncrementStepper,\n  NumberDecrementStepper,\n  Textarea,\n  Button,\n  Text,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport { useForm, FieldValues } from \"react-hook-form\";\nimport { ethers } from \"ethers\";\nimport { useBatchSenderContract } from \"../hooks/contracts\";\nimport { useState } from \"react\";\nimport { toast } from 'react-toastify';\nimport { walletAtom } from \"../store\";\nimport { useAtom } from \"jotai\";\nimport { getEtherscanLink, formatAddress, getSupportedNetworks } from \"../utils\";\nimport { useNetworkSupported } from \"../hooks/network\";\n\ninterface FormValues {\n  token: string;\n  decimals: string;\n  addressesAndAmounts: string;\n}\n\nconst Home: NextPage = () => {\n  const {\n    handleSubmit,\n    register,\n    setValue,\n    formState: { errors, isSubmitting },\n  } = useForm();\n\n  const supportedNetworks = getSupportedNetworks();\n\n  const isNetworkSupported = useNetworkSupported();\n\n  const batchSenderContract = useBatchSenderContract() as ethers.Contract;\n\n  const [wallet,] = useAtom(walletAtom);\n\n  const [addresses, setAddresses] = useState<string[]>([]);\n  const [amounts, setAmounts] = useState<ethers.BigNumber[]>([]);\n  const [fee, setFee] = useState(\"\");\n\n  const [isSubmmittingTx, setIsSubmittingTx] = useState(false);\n\n  const onSubmit = async (_values: FieldValues) => {\n    // const { token, decimals, addressesAndAmounts } = values as FormValues\n    \n    // Calculate total ether to send to contract, including fee\n    let total = amounts.reduce((acc, amt) => amt.add(acc), ethers.BigNumber.from(0));\n    total = total.add(fee);\n\n    try {\n      setIsSubmittingTx(true);\n      const tx = await batchSenderContract.multisendEther(addresses, amounts, { value: total });\n      const receipt = await tx.wait();\n\n      const txLink = getEtherscanLink(wallet.chainId, receipt.transactionHash);\n      // Show toast notification\n      toast(() => (\n        <div style={{ fontSize: 12 }}>\n          <div>Transaction Success!</div>\n          <div>Click on the link below to view your transaction</div>\n          <div>\n            <a href={txLink} target=\"_blank\" rel=\"noreferrer\">\n              <u>{formatAddress(receipt.transactionHash, 24)}</u>\n            </a>\n          </div>\n        </div>\n      ))\n    } catch (err) {\n      toast(`Sorry but there is an error sending your transaction ${err}`);\n    }\n\n    setIsSubmittingTx(false);\n  }\n\n  const setAddressWithAmountsExample = () => {\n    const example = `0x795aE9223FBb6a12a6c71391755Be1707E52EB72,0.005\\n0x42D57aAA086Ee6575Ddd3b502af1b07aEa91E495,0.006`;\n    setValue(\"addressesAndAmounts\", example);\n    const { addresses, amounts } = parseAddressesAndAmounts(example);\n    setAddresses(addresses);\n    setAmounts(amounts);\n    calculateFee(addresses.length);\n  }\n\n  const onAddressesAndAmountsChanged = (e: any) => {\n    const value = e.target.value;\n    const { addresses, amounts } = parseAddressesAndAmounts(value);\n    setAddresses(addresses);\n    setAmounts(amounts);\n    calculateFee(addresses.length);\n  }\n\n  const parseAddressesAndAmounts = (addresesAndAmounts: string) => {\n    if (!addresesAndAmounts) {\n      return { addresses: [], amounts: [] }\n    }\n    try {\n      const rows = addresesAndAmounts.split(\"\\n\");\n      const addresses = [];\n      const amounts = [];\n      for (let row of rows) {\n        const split = row.split(',');\n        const address = split[0];\n        const isAddress = ethers.utils.isAddress(address);\n        if (!isAddress) {\n          toast(`Invalid address: ${address}`);\n          throw new Error(\"invalid address\");\n        }\n        const amount = ethers.utils.parseEther(split[1]);\n        addresses.push(address);\n        amounts.push(amount);\n      }\n\n      return { addresses, amounts };\n    } catch (err) {\n      return { addresses: [], amounts: [] }\n    }\n  }\n\n  const calculateFee = async (numOfAddresses: number) => {\n    if (numOfAddresses == 0) {\n      setFee(\"\");\n      return;\n    }\n    const fee = await batchSenderContract.calculateFee(numOfAddresses);\n    setFee(fee.toString());\n  }\n\n  return (\n    <>\n      <Navbar />\n      <Container minH=\"90vh\" maxW=\"1120px\">\n\n        <Box mt=\"4\">\n          <Text fontSize=\"xl\">Supported Networks</Text>\n          <Flex mt=\"4\">\n          {supportedNetworks.map(n => (\n            <Flex key={n.name} flexDirection={\"column\"} alignItems=\"center\" mr=\"4\">\n              <img\n                src={n.image}\n                alt={n.name}\n                style={{ height: \"32px\" }}\n              />\n              <Text fontSize=\"12px\" >{n.name}</Text>\n            </Flex>\n          ))}\n          </Flex>\n        </Box>\n\n        {/* https://chakra-ui.com/getting-started/with-hook-form */}\n        <Box maxW=\"720px\" py={24}>\n          <form onSubmit={handleSubmit(onSubmit)}>\n            <Flex direction={{ base: \"column\", md: \"row\" }}>\n              {/* Select Token */}\n              <FormControl\n                flex={{ base: \"1\", md: \"4\" }}\n                mb=\"6\"\n              >\n                <FormLabel>Select Token</FormLabel>\n                <Select\n                  id=\"token\"\n                  {...register(\"token\", {})}\n                >\n                  <option value=\"matic\">Matic Native Token</option>\n                </Select>\n              </FormControl>\n              {/* Decimal Places */}\n              <FormControl\n                flex={{ base: \"1\", md: \"1\" }}\n                ml={{ base: \"0px\", md: \"12px\" }}\n                mb=\"6\"\n              >\n                <FormLabel>Decimal Places</FormLabel>\n                <NumberInput\n                  id=\"decimals\"\n                  defaultValue={18}\n                  isReadOnly\n                >\n                  <NumberInputField {...register(\"decimals\", {})} />\n                  <NumberInputStepper>\n                    <NumberIncrementStepper />\n                    <NumberDecrementStepper />\n                  </NumberInputStepper>\n                </NumberInput>\n              </FormControl>\n            </Flex>\n            {/* Addresses with amounts */}\n            <FormControl>\n              <Flex justify=\"space-between\">\n                <FormLabel>Addresses with amounts</FormLabel>\n                <Text\n                  as=\"u\"\n                  _hover={{ cursor: \"pointer\" }}\n                  onClick={setAddressWithAmountsExample}>\n                  Show Example\n                </Text>\n              </Flex>\n              <Textarea\n                id=\"addressesAndAmounts\"\n                placeholder=\"Insert addresses with amounts separated by comma\"\n                {...register(\"addressesAndAmounts\", {\n                  required: 'This is required',\n                  onBlur: onAddressesAndAmountsChanged,\n                })}\n              />\n            </FormControl>\n            <Flex pt=\"2\">\n              {fee && (\n                <Text>\n                  Fee for <b>{addresses.length}</b> addresses: &nbsp;\n                  <b>{ethers.utils.formatEther(fee)} MATIC</b>\n                </Text>\n              )}\n            </Flex>\n            { !isNetworkSupported && <Text color=\"red.500\">Unsupported Network</Text> }\n            <Button\n              disabled={!fee || isSubmmittingTx || !isNetworkSupported}\n              type=\"submit\"\n              mt=\"12\"\n              w=\"100%\"\n              variant=\"outline\"\n              color=\"brand.lightBlue\"\n              background=\"brand.blue\"\n              _hover={{\n                color: \"brand.blue\",\n                background: \"brand.lightBlue\",\n                borderColor: \"brand.lightBlue\",\n              }}\n              _disabled={{\n                color: \"brand.lightBlue\",\n                background: \"grey\"\n              }}\n            >\n              {\n                isSubmmittingTx ? \n                <Spinner color='red.500' /> :\n                \"Send Tokens\"\n              }\n            </Button>\n          </form>\n        </Box>\n      </Container>\n      <Footer />\n    </>\n  );\n};\n\nexport default Home;\n","/Users/kevin/playground/batch-sender-app/packages/app/components/Footer.tsx",[],[],"/Users/kevin/playground/batch-sender-app/packages/app/components/Navbar.tsx",[],[],{"ruleId":"31","severity":1,"message":"32","line":69,"column":6,"nodeType":"33","endLine":69,"endColumn":8,"suggestions":"34"},{"ruleId":"35","severity":1,"message":"36","line":156,"column":15,"nodeType":"37","endLine":160,"endColumn":17},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setWallet', 'setWeb3Provider', and 'supportedChainIds'. Either include them or remove the dependency array.","ArrayExpression",["38"],"@next/next/no-img-element","Do not use `<img>` element. Use `<Image />` from `next/image` instead. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement",{"desc":"39","fix":"40"},"Update the dependencies array to be: [setWallet, setWeb3Provider, supportedChainIds]",{"range":"41","text":"42"},[2163,2165],"[setWallet, setWeb3Provider, supportedChainIds]"]